dt[, (g):=abbreviate(get(g))]
}
x_order <- dt[,.(i=min(.I)),by=get(x)][, get]
dt[, (x):=factor(get(x), x_order)]
g_order <- dt[,.(i=min(.I)),by=get(g)][, get]
dt[, (g):=factor(get(g), g_order)]
res <- fit_model(x, y, g, covcols, rintcols, rslopecols, dt, fit.model, error, add_interaction, interaction.group, interaction.treatment, mean_intervals.method, conf.mean, contrasts.method, contrasts.scaling, conf.contrast, adjust)
ci_means <- res$ci_means
ci_diffs <- res$ci_diffs
tables <- res$tables
# temp for debug
# tables$contrasts <- ci_diffs
# plot it
base.size <- 18
gg_contrasts <- NULL
gg_treatments <- NULL
if(show.contrasts == TRUE){
gg_contrasts <- ggplot(data=ci_diffs, aes_string(x=x, y=y)) +
# draw line at y=0 first
# draw effects + CI
geom_linerange(aes(ymin = lower, ymax = upper), color='black', size=2) +
geom_point(size=3, color='white') +
geom_point(size=2, color='black')
# re-label Y
if(contrasts.scaling=='raw'){contrast_axis_name <- 'Effect'}
if(contrasts.scaling=='percent'){contrast_axis_name <- 'Percent Effect'}
if(contrasts.scaling=='standardized'){contrast_axis_name <- 'Standardized Effect'}
gg_contrasts <- gg_contrasts + ylab(contrast_axis_name)
# re-label X
contrast_txt <- ifelse(contrasts.method=='coefficients', 'Coefficient', 'Contrast')
gg_contrasts <- gg_contrasts + xlab(contrast_txt)
# set theme and gridlines first as background
if(jtheme=='grey'){
gg_contrasts <- gg_contrasts + theme_grey(base_size = base.size)
}
if(jtheme=='gray'){
gg_contrasts <- gg_contrasts + theme_gray(base_size = base.size)
}
if(jtheme=='bw'){
gg_contrasts <- gg_contrasts + theme_bw(base_size = base.size)
}
if(jtheme=='classic'){
gg_contrasts <- gg_contrasts + theme_classic(base_size = base.size)
}
if(jtheme=='minimal'){
gg_contrasts <- gg_contrasts + theme_minimal(base_size = base.size)
}
if(jtheme=='cowplot'){
gg_contrasts <- gg_contrasts + theme_cowplot(font_size = base.size)
}
# include zero in axis?
y_range <- range(pretty(c(ci_diffs[, lower], ci_diffs[, upper])))
ylims <- y_range
if(min(y_range) > 0){
ylims <-c(0, max(y_range))
}
if(max(y_range) < 0){
ylims <- c(min(y_range), 0)
}
if(horizontal==TRUE){
gg_contrasts <- gg_contrasts +
scale_y_continuous(position = "right") +
theme(plot.margin = margin(0, 0, 0, 0, "cm"))
if(zero==TRUE){
gg_contrasts <- gg_contrasts + coord_flip(ylim=ylims)
}else{
gg_contrasts <- gg_contrasts + coord_flip()
}
}
}
if(show.treatments == TRUE){
gg_treatments <- ggplot(data=dt, aes_string(x=x, y=y))
dodge_width <- 0.75
# show box plot
if(display.treatment=='box'){ # plot before dots
if(show.dots==TRUE){outlier_color <- NA}else{outlier_color <- NULL}
gg_treatments <- gg_treatments + geom_boxplot(data=dt, aes_string(fill=g), outlier.colour = outlier_color)
}
if(display.treatment=='ci'){
gg_treatments <- gg_treatments + geom_linerange(data=ci_means, aes_string(ymin = 'lower', ymax = 'upper', group=g), size=2, position=position_dodge(dodge_width))
gg_treatments <- gg_treatments + geom_point(data=ci_means, aes_string(x=x, y=y, shape=g), size=5, color='white', position=position_dodge(dodge_width))
gg_treatments <- gg_treatments + geom_point(data=ci_means, aes_string(x=x, y=y, shape=g), size=3, color='black', position=position_dodge(dodge_width))
gg_treatments
}
# show dots
if(show.dots==TRUE){
#gg_treatments <- gg_treatments + geom_jitter(aes_string(group=g), width=0.1, height = 0.0, size=1, alpha=0.5)
if(is.null(rintcols)){
gg_treatments <- gg_treatments + geom_point(aes_string(fill=g), size=1, alpha=0.5, position=position_jitterdodge())
}else{
gg_treatments <- gg_treatments + geom_point(aes_string(fill=g), size=1, alpha=0.5, position=position_jitterdodge())
# gg_treatments <- ggplot(data=dt, aes_string(x=x, y=y))
# gg_treatments <- gg_treatments + geom_boxplot(data=dt, aes_string(fill=g), outlier.colour = outlier_color)
# gg_treatments <- gg_treatments + geom_line(aes(group=Time, color=ID), position=position_dodge(dodge_width))
# gg_treatments
}
}
# show mean
if(show.mean==TRUE & display.treatment=='box'){
dot_color <- ifelse(color_palette=='Greys','black','black')
gg_treatments <- gg_treatments + geom_point(data=ci_means, aes_string(x=x, y=y, group=g), size=3, color='white', position=position_dodge(width=dodge_width))
gg_treatments <- gg_treatments + geom_point(data=ci_means, aes_string(x=x, y=y, group=g), size=2, color=dot_color, position=position_dodge(width=dodge_width))
}
# set colors
if(color_palette != 'ggplot'){
gg_treatments <- gg_treatments + scale_color_brewer(palette = color_palette)
gg_treatments <- gg_treatments + scale_fill_brewer(palette = color_palette)
}
# set theme and gridlines first as background
if(jtheme=='grey'){
gg_treatments <- gg_treatments + theme_grey(base_size = base.size)
}
if(jtheme=='gray'){
gg_treatments <- gg_treatments + theme_gray(base_size = base.size)
}
if(jtheme=='bw'){
gg_treatments <- gg_treatments + theme_bw(base_size = base.size)
}
if(jtheme=='classic'){
gg_treatments <- gg_treatments + theme_classic(base_size = base.size)
}
if(jtheme=='minimal'){
gg_treatments <- gg_treatments + theme_minimal(base_size = base.size)
}
if(jtheme=='cowplot'){
gg_treatments <- gg_treatments + theme_cowplot(font_size = base.size)
}
legend_postion <- ifelse(grouping==TRUE,'bottom','none')
gg_treatments <- gg_treatments +
theme(plot.margin = margin(0, 0, 0, 0, "cm"), legend.position = legend_postion)
if(horizontal==TRUE){
gg_treatments <- gg_treatments +
coord_flip()
}
if(!is.null(y_label)){
gg_treatments <- gg_treatments + ylab(y_label)
}
}
if(rel_height==0){
ar <- nrow(ci_diffs)/nrow(ci_means)
}else{
ar <- rel_height
}
if(show.contrasts==TRUE & show.treatments==TRUE){
gg <- plot_grid(gg_contrasts, gg_treatments, nrow=2, align = "v", rel_heights = c(1*ar, 1))
}
if(show.contrasts==TRUE & show.treatments==FALSE){
gg <- gg_contrasts
}
if(show.contrasts==FALSE & show.treatments==TRUE){
gg <- gg_treatments
}
return(list(gg=gg, gg_contrasts=gg_contrasts, gg_treatments=gg_treatments, tables=tables))
}
res <- HarrellPlot(x='Treatment', y='Vburst', g='Sex', data=fly, add_interaction = TRUE, interaction.group = TRUE, contrasts.method = 'revpairwise', contrasts.scaling = 'raw', y_label = ('Burst Speed (cm/s)'))
gg_hplot <- res$gg
gg_hplot
res <- HarrellPlot(x='Treatment', y='Vburst', g='Sex', data=fly, add_interaction = TRUE, interaction.group = TRUE, contrasts.method = 'revpairwise', contrasts.scaling = 'percent', y_label = ('Burst Speed (cm/s)'))
gg_hplot <- res$gg
gg_hplot
packageVersion("BiocStyle")
source("https://bioconductor.org/biocLite.R")
biocLite("BiocStyle")
packageVersion("BiocStyle")
install_github("Bioconductor/BiocStyle")
library(devtools)
install_github("Bioconductor/BiocStyle")
package_version("BiocStyle")
?package_version
package_version(BiocStyle)
library(BiocStyle)
library(BiocStyle)
package_version(BiocStyle)
package_version("BiocStyle")
packageVersion("BiocStyle")
?`BiocStyle-defunct`
source("https://bioconductor.org/biocLite.R")
biocLite()
?upgrade Bioconductor
biocLite("BiocUpgrade")
install.packages(c("rmarkdown", "bookdown"))
packageVersion("BiocStyle")
shiny::runApp('shiny/HarrellPlot')
getRversion()
library(ggplot2)
R_version
R.version.string
library(data.table)
library(lmerTest)
shiny::runApp('shiny/HarrellPlot')
source("https://raw.githubusercontent.com/radiant-rstats/minicran/gh-pages/install.R")
radiant:::radiant_viewer()
shiny::runApp('shiny/HarrellPlot')
runApp('shiny/HarrellPlot')
?source
library("devtools")
library(roxygen2)
setwd("/package")
ls
getwed
getwd
getwd()
setwd("package")
getwd()
install("HarrellPlot")
install("HarrellPlot")
install("HarrellPlot")
library(HarrellPlot)
?HarrellPlot
install("HarrellPlot")
library(HarrellPlot)
?make_formula_str
make_formula_str
fit_model()
make_formula_str
install("HarrellPlot")
library(HarrellPlot)
make_formula_str()
shiny::runApp('~/Google Drive/Research/Projects/HarrellPlot project folder/HarrellPlot/shiny/HarrellPlot')
getwd()
setwd(..)
shiny::runApp('shiny/HarrellPlot')
getwd()
runApp('shiny/HarrellPlot')
runApp('shiny/HarrellPlot')
runApp('shiny/HarrellPlot')
runApp('shiny/HarrellPlot')
runApp('shiny/HarrellPlot')
runApp('shiny/HarrellPlot')
runApp('shiny/HarrellPlot')
runApp('shiny/HarrellPlot')
runApp('shiny/HarrellPlot')
runApp('shiny/HarrellPlot')
runApp('shiny/HarrellPlot')
runApp('shiny/HarrellPlot')
runApp('shiny/HarrellPlot')
runApp('shiny/HarrellPlot')
runApp('shiny/HarrellPlot')
runApp('shiny/HarrellPlot')
runApp('shiny/HarrellPlot')
runApp('shiny/HarrellPlot')
library(data.table)
file_path <- "data/fly_burst.txt"
fn <- fread(file_path)
fn
out_path <- "package/HarrellPlot/data/fly.Rsd"
save(out_path)
?save
dt <- fread(file_path)
out_path <- "package/HarrellPlot/data/fly.Rsd"
save(dt, out_path)
dt
save(dt)
out_path <- "package/HarrellPlot/data"
save(out_path, dt)
fly <- fread(file_path)
out_path <- "package/HarrellPlot/data.RData"
save(fly, file=out_path)
out_path <- "package/HarrellPlot/data/data.RData"
save(fly, file=out_path)
install("HarrellPlot")
library("devtools")
library(roxygen2)
getwd()
setwd("package")
install("HarrellPlot")
fly <- NULL
fly
library(HarrellPlot)
fit_model
fit_model()
fly
data(fly)
data
devtools::use_data(fly)
data()
fly
?data
data()
fly
ls
fly
library(data.table)
file_path <- "data/fly_burst.txt"
fly <- fread(file_path)
getwd()
install.packages("rprojroot")
library(rprojroot)
getwd()
list(PROJHOME = normalizePath(getwd()))
?rprojroot
root_fun("HarrellPlot.Rproj")
dir(rprojroot::find_root("HarrellPlot.Rproj"))
root_dir <- rprojroot::find_root("HarrellPlot.Rproj")
root_dir
out_path
data(out_path)
data("fly")
fly
root_dir <- rprojroot::find_root("HarrellPlot.Rproj")
setwd("root_dir")
file_path <- "data/fly_burst.txt"
fly <- fread(file_path)
getwd()
root_dir <- rprojroot::find_root("HarrellPlot.Rproj")
setwd(root_dir)
file_path <- "data/fly_burst.txt"
fly <- fread(file_path)
fly
devtools::use_data(fly)
library("devtools")
devtools::use_data(fly)
out_path <- "package/HarrellPlot/data/data.RData"
save(fly, file=out_path)
out_path <- "package/HarrellPlot/data/fly.RData"
save(fly, file=out_path)
root_dir <- rprojroot::find_root("HarrellPlot.Rproj")
setwd("root_dir/package")
# from project directory
document()
# install - current directory needs to be directory containing the "HarrellPlot" directory with all the bits
install("HarrellPlot")
library(rprojroot)
library("devtools")
library(roxygen2)
root_dir <- rprojroot::find_root("HarrellPlot.Rproj")
setwd("root_dir/package")
# from project directory
document()
root_dir <- rprojroot::find_root("HarrellPlot.Rproj")
root_dir
setwd(paste(root_dir,"/package", sep=''))
# from project directory
document()
# install - current directory needs to be directory containing the "HarrellPlot" directory with all the bits
install("HarrellPlot")
library(HarrellPlot)
data("fly")
fly
fly<-NULL
data("fly")
fly
fly <- NULL
fly
data("fly")
fly
t <- seq(0,180)
t
t_min <- 0
t_max <- 180
t <- seq(0,180)
D <- 1 # ingested glucose dose
k <- 1 # "rate of emptying"
beta <- 1 # shape factor
q_duo <- D*(1 - exp(-(k*t)^beta))
qplot(x=t, y=q_duo)
library(ggplot2)
library(data.table)
k_bs <- 1
G_empt <- 1
# t is in minutes
t_min <- 0
t_max <- 180
t <- seq(0,180)
D <- 1 # ingested glucose dose
k <- 1 # "rate of emptying"
beta <- 1 # shape factor
q_duo <- D*(1 - exp(-(k*t)^beta))
qplot(x=t, y=q_duo)
D <- 10 # g ingested glucose dose
k <- 0.01 # "rate of emptying" constant (per minute)
beta <- 1 # shape factor
q_duo <- D*(1 - exp(-(k*t)^beta))
qplot(x=t, y=q_duo)
D <- 10 # g ingested glucose dose
k <- 0.01 # "rate of emptying" constant (per minute)
beta <- 0.1 # shape factor
q_duo <- D*(1 - exp(-(k*t)^beta))
qplot(x=t, y=q_duo)
k <- 0.01 # "rate of emptying" constant (per minute)
beta <- 100 # shape factor
q_duo <- D*(1 - exp(-(k*t)^beta))
qplot(x=t, y=q_duo)
beta <- 1 # shape factor
q_duo <- D*(1 - exp(-(k*t)^beta))
qplot(x=t, y=q_duo)
beta <- 10 # shape factor
q_duo <- D*(1 - exp(-(k*t)^beta))
qplot(x=t, y=q_duo)
beta <- 0.1 # shape factor
q_duo <- D*(1 - exp(-(k*t)^beta)) # will increase to D
qplot(x=t, y=q_duo)
t_max <- 240
t <- seq(0,180)
D <- 10 # g ingested glucose dose
k <- 0.01 # "rate of emptying" constant (per minute)
beta <- 1 # shape factor
q_duo <- D*(1 - exp(-(k*t)^beta)) # will increase to D
qplot(x=t, y=q_duo)
beta <- 5 # shape factor
q_duo <- D*(1 - exp(-(k*t)^beta)) # will increase to D
qplot(x=t, y=q_duo)
beta <- 2 # shape factor
q_duo <- D*(1 - exp(-(k*t)^beta)) # will increase to D
qplot(x=t, y=q_duo)
G_emp <- D*beta*k^beta*t^(beta-1)*exp(-(k*t)^beta)
qplot(x=t, y=q_duo)
qplot(x=t, y=G_emp)
beta <- 10 # shape factor
q_duo <- D*(1 - exp(-(k*t)^beta)) # amount of glucose in dudenum. This is a logistic? fucntion with max at D.
G_emp <- D*beta*k^beta*t^(beta-1)*exp(-(k*t)^beta) # equal to q_duo.dot (1st derivative of q_duo)
#qplot(x=t, y=q_duo)
qplot(x=t, y=G_emp)
beta <- .1 # shape factor
q_duo <- D*(1 - exp(-(k*t)^beta)) # amount of glucose in dudenum. This is a logistic? fucntion with max at D.
G_emp <- D*beta*k^beta*t^(beta-1)*exp(-(k*t)^beta) # equal to q_duo.dot (1st derivative of q_duo)
#qplot(x=t, y=q_duo)
qplot(x=t, y=G_emp)
beta <- 1 # shape factor
q_duo <- D*(1 - exp(-(k*t)^beta)) # amount of glucose in dudenum. This is a logistic? fucntion with max at D.
G_emp <- D*beta*k^beta*t^(beta-1)*exp(-(k*t)^beta) # equal to q_duo.dot (1st derivative of q_duo)
#qplot(x=t, y=q_duo)
qplot(x=t, y=G_emp)
beta <- 2 # shape factor
q_duo <- D*(1 - exp(-(k*t)^beta)) # amount of glucose in dudenum. This is a logistic? fucntion with max at D.
G_emp <- D*beta*k^beta*t^(beta-1)*exp(-(k*t)^beta) # equal to q_duo.dot (1st derivative of q_duo)
#qplot(x=t, y=q_duo)
qplot(x=t, y=G_emp)
k <- 0.01 # "rate of emptying" constant (per minute)
beta <- 1.5 # shape factor
q_duo <- D*(1 - exp(-(k*t)^beta)) # amount of glucose in dudenum. This is a logistic? fucntion with max at D.
G_emp <- D*beta*k^beta*t^(beta-1)*exp(-(k*t)^beta) # equal to q_duo.dot (1st derivative of q_duo)
#qplot(x=t, y=q_duo)
qplot(x=t, y=G_emp)
t_min <- 0
t_max <- 240
t <- seq(t_min,t_max)
D <- 10 # g ingested glucose dose
k <- 0.01 # "rate of emptying" constant (per minute)
beta <- 1.5 # shape factor
q_duo <- D*(1 - exp(-(k*t)^beta)) # amount of glucose in dudenum. This is a logistic? fucntion with max at D.
G_emp <- D*beta*k^beta*t^(beta-1)*exp(-(k*t)^beta) # equal to q_duo.dot (1st derivative of q_duo)
#qplot(x=t, y=q_duo)
qplot(x=t, y=G_emp)
k_abs <- 0.1
q_gut_dot <- -k_abs*q_duo + G_empt
Ra = k_abs*q_duo
#qplot(x=t, y=q_duo)
qplot(x=t, y=G_empt)
qplot(x=t, y=q_gut_dot)
qplot(x=t, y=Ra)
k_abs <- 1
q_gut_dot <- -k_abs*q_duo + G_empt
Ra = k_abs*q_duo
#qplot(x=t, y=q_duo)
qplot(x=t, y=G_empt)
qplot(x=t, y=q_gut_dot)
qplot(x=t, y=Ra)
qplot(x=t, y=q_duo)
qplot(x=t, y=G_empt)
k <- 0.01 # "rate of emptying" constant (per minute)
beta <- 1.5 # shape factor
q_duo <- D*(1 - exp(-(k*t)^beta)) # amount of glucose in dudenum. This is a logistic? fucntion with max at D.
G_empt <- D*beta*k^beta*t^(beta-1)*exp(-(k*t)^beta) # Gastric emptying rate. Equal to q_duo.dot (1st derivative of q_duo)
k_abs <- 1
q_gut_dot <- -k_abs*q_duo + G_empt
Ra = k_abs*q_duo
qplot(x=t, y=q_duo)
qplot(x=t, y=G_empt)
qplot(x=t, y=q_gut_dot)
qplot(x=t, y=Ra)
qplot(x=t, y=q_gut_dot)
k_abs <- 0.01
q_gut_dot <- -k_abs*q_duo + G_empt
Ra = k_abs*q_duo
qplot(x=t, y=q_duo)
qplot(x=t, y=G_empt)
qplot(x=t, y=q_gut_dot)
k_abs <- 0.01
Ra = k_abs*q_duo
q_gut_dot <- -Ra + G_empt
qplot(x=t, y=q_duo)
qplot(x=t, y=G_empt)
qplot(x=t, y=q_gut_dot)
qplot(x=t, y=Ra)
t_min <- 0
t_max <- 360
t <- seq(t_min,t_max)
D <- 10 # g ingested glucose dose
k <- 0.01 # "rate of emptying" constant (per minute)
beta <- 1.5 # shape factor
q_duo <- D*(1 - exp(-(k*t)^beta)) # amount of glucose in dudenum. This is a logistic? fucntion with max at D.
G_empt <- D*beta*k^beta*t^(beta-1)*exp(-(k*t)^beta) # Gastric emptying rate. Equal to q_duo.dot (1st derivative of q_duo)
k_abs <- 0.01
Ra = k_abs*q_duo
q_gut_dot <- -Ra + G_empt
qplot(x=t, y=q_duo)
qplot(x=t, y=G_empt)
qplot(x=t, y=q_gut_dot)
qplot(x=t, y=Ra)
D <- 10 # g ingested glucose dose
k <- 0.011 # "rate of emptying" constant (per minute)
beta <- 1.233 # shape factor
q_duo <- D*(1 - exp(-(k*t)^beta)) # amount of glucose in dudenum. This is a logistic? fucntion with max at D.
G_empt <- D*beta*k^beta*t^(beta-1)*exp(-(k*t)^beta) # Gastric emptying rate. Equal to q_duo.dot (1st derivative of q_duo)
k_abs <- 0.231
Ra = k_abs*q_duo
q_gut_dot <- -Ra + G_empt
qplot(x=t, y=q_duo)
qplot(x=t, y=G_empt)
qplot(x=t, y=q_gut_dot)
qplot(x=t, y=Ra)
